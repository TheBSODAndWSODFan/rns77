name: Download and Publish Stream

on:
  workflow_dispatch:  # Manually trigger this workflow from GitHub UI

jobs:
  record-stream:
    runs-on: ubuntu-latest

    env:
      tag_name: download-recording-${{ github.run_id }}

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y wget aria2 curl gh

      - name: Record stream using mpv (stop manually)
        id: record
        continue-on-error: true
        run: |
          mkdir -p artifacts/output
          wget "https://ztp1.androidcombo.com/xapk/com.moonlife.ls.cup2.global/bf80743b9c354653bc871e459d2e960d/download?name=Cup%2BWar%253A%2BSurvival_1.0.90_apkcombo.com.xapk&utm_source=apkcombo.com&lang=en" -O "artifacts/output/CupWarSurvival_1.0.90.xapk"

      - name: Convert TS to MP4 using ffmpeg (if exists)
        if: always()
        run: |
          if [ -f artifacts/output/recorded.ts ]; then
            ffmpeg -i artifacts/output/recorded.ts -vcodec copy -acodec copy artifacts/output/recorded.mp4
            rm -rf artifacts/output/recorded.ts 
          else
            echo "recorded.ts not found, skipping ffmpeg"
          fi

      - name: Create GitHub Release
        if: always()
        run: |
          gh release create "$tag_name" --repo "${{ github.repository }}" \
            --title "Stream Recording - $tag_name" \
            --notes "Automation of stream recording." \
            --draft
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all artifacts to the release
        if: always()
        run: |
          repo=${{ github.repository }}
          tag_name=${{ env.tag_name }}
          for artifact_dir in ./artifacts/*; do
            for artifact in "$artifact_dir"/*; do
              gh release upload "$tag_name" "$artifact" --repo "$repo" --clobber
            done
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup (optional)
        if: always()
        run: rm -rf artifacts
